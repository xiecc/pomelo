{
  "name": "pomelo-schedule",
  "version": "0.3.3",
  "main": "./lib/schedule",
  "author": {
    "name": "XiaogangZhang",
    "email": "zhang0925@gmail.com"
  },
  "dependencies": {
    "log4js": ">=0.4.1"
  },
  "readme": "# pomelo-shedule\r\npomelo-schedule is a schedule tool for nodejs, it's purpose is to provide a product level schedulemodule which is high efficient and can support large number job schedule.You can \r\n\r\nAs a schedule tool, it support two kinds of trigger: A simple trigger which use a js object and  a Cron time trigger which use a Cron time string.\r\n##Installation\r\n```\r\nnpm install pomelo-schedule\r\n```\r\n##Schedule simple Job\r\nSimple job will receive a object as a trigger, which take three attributes, a JS function as object, and an object as the parameters in the job.\r\n\r\n###Simple trigge example\r\n``` javascript\r\n//Fire 10000ms after now, and run 10 times with a 1000ms interval.\r\nvar trigger1 = {\r\n  start : Date.now() + 10000, //Start time, use the time in date object\r\n  period : 1000,      //Fire interval, the precision is millisecond\r\n  count : 10          //Fire times, in this case the trigger will fire 10 times.   \r\n}\r\n\r\n//Fire right now, and run 10 times with 1000ms interval.\r\nvar trigger2 = {\r\n  period : 1000,\r\n  count : 10\r\n}\r\n\r\n//Fire right now, and run for ever with 1000ms interval.\r\nvar trigger3 = {\r\n  period : 1000\r\n}\r\n\r\n//Fire 3000ms after right now, run only once.\r\nvar trigger4 = {\r\n  start : Date.now() + 3000;\r\n}\r\n\r\n//The job will fire right now, run only once.\r\nvar trigger5 = {\r\n}\r\n\r\n//Illegal! The 'count' attribute cannot used alone without 'period'.  \r\nvar trigger6 = {\r\n  count : 10;\r\n}\r\n``` \r\n\r\n###Simple job example\r\n``` javascript\r\nvar schedule = require('../lib/schedule');\r\n\r\nvar simpleJob = function(data){\r\n   console.log(\"run Job :\" + data.name);\r\n}\r\n\r\nschedule.scheduleJob({start:Date.now(), period:3000, count: 10}, simpleJob, {name: 'simpleJobExample'});\r\n```\r\n##Schedule cron Job\r\nCron job is the job that use cron trigger, it is just like the simple job, only use the cron trigger instead of simple trigger.\r\n\r\n###Cron job example\r\n``` javascript\r\nvar schedule = require('../lib/schedule');\r\n\r\nvar cronJob = function(data){\r\n   console.log(\"run Job :\" + data.name);\r\n}\r\n\r\nschedule.scheduleJob(\"0 0/15 8 * * *\", cronJob, {name:'cronJobExample'});\r\n```\r\n###Cron Trigger syntax\r\nCron trigger has 7 fiels, the format is very like the cronTab in linux, only add a second field in the head. The fields and the boundary is as follow:\r\n<pre style=\"bgcolor='#dbdbdb'\">\r\n*     *     *     *   *    *        command to be executed\r\n-     -     -     -   -    -\r\n|     |     |     |   |    |\r\n|     |     |     |   |    +----- day of week (0 - 6) (Sunday=0)\r\n|     |     |     |   +------- month (1 - 12)\r\n|     |     |     +--------- day of month (1 - 31)\r\n|     |     +----------- hour (0 - 23)\r\n|     +------------- min (0 - 59)\r\n+------------- second (0 - 59)\r\n</pre>\r\n###Exampe of cron tirggers\r\n\r\n\"0/2 0 8 * * 6\"    Fire at every Satuaday at every even seconds of 08:00\r\n\"0 30 10 1 4 *\"      Fire at 10:30 on 1st of March  \r\n\"15 15 15 10 10 *\"   Fire at Octorber 10th, at 15:15:15.\r\n\r\n###Special charactors\r\nPomelo-schedule allow three kinds of spechial characters, they are '-', '/' and '.'.\r\n\r\n-: '-' means range. For example, 1-3 in the second field means the seconds 1, 2 and 3\r\n\r\n/: means increasement. For exapmle, 1/20 in the second field means 1, 21 and 41 second, and 1/2 means for every odd seconds as 1, 3, 5 ... ...\r\n\r\n,: means additional values. For example, 1, 10, 15 in the second field means 1, 10 and 15 second. You can use '-', and '/' with ',', for example, 11,20-22,0/2 in the second filed means 11, 21 and all the even seconds. \r\n\r\n##Cancel Job \r\n``` javascript\r\nvar schedule = require('../lib/schedule');\r\n\r\nvar simpleJob = function(){\r\n   console.log(\"run simple Job \");\r\n}\r\n\r\n//Add a simple job and save the id \r\nvar id = schedule.scheduleJob({period: 1000}, cronJob, {);\r\n\r\n/**\r\n * Do some thing else\n */\r\n\r\n//CancleJob\r\nschedule.cancleJob(id);\r\n```\r\nWhen you cancle a job, it will stop schedule immidiatelly, and delete the job.\r\n",
  "_id": "pomelo-schedule@0.3.3",
  "description": "pomelo-schedule is a schedule tool for nodejs, it's purpose is to provide a product level schedulemodule which is high efficient and can support large number job schedule.You can",
  "_from": "pomelo-schedule@>=0.0.2"
}
