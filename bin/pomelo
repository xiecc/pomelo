#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs')
    cp = require('child_process'),
    client = require('socket.io-client'),
    exec = cp.exec,
    spawn = cp.spawn,
    adminClient = require('../lib/client/client'),
    utils = require('../lib/util/utils');
    util = require('util');

/**
 *  Common Variables
 */
var args = process.argv.slice(2);
var DEAMON = false;
var TIME_INIT = 1000;
var TIME_KILL_WAIT = 6000;
var TIME_STOP_WAIT = 10000;
var IF_WORKSPACE = fs.existsSync('./app.js')||fs.existsSync('game-server/app.js'); 
var IF_HOME = utils.endsWith(process.cwd(),'game-server');
var FOREVER = fs.existsSync('/usr/local/bin/forever');
var TMP_FILE = IF_HOME ? process.cwd()+'/../logs/tmp' :  process.cwd()+ '/logs/tmp';
var MASTER_JSON;

var DEV = "development";
var PRD = "production";
var DEM = "--deamon"
var NOWORKSPACE_ERROR = "Please go to your pomelo project workspace to start the application.";
var COMMAND_ERROR = "The command is error format.";
var NORUNNING_ERROR = "There is no running program.";
var INSTALLFOREVER_ERROR = "Please install forever use command: npm install forever -g.";
var CONNECT_ERROR =  "Fail to connect to admin console server.";
var NODEINFO_ERROR = "Fail to request node information.";
var STOPSERVER_ERROR = "Fail to stop server.";
var RUNDEAMON_INFO = "Application run in deamon.\nStop the application use the command:pomelo stop.";
var CLOSEAPP_INFO = "Closing the application......\nPlease wait......"; 


/**
 * Usage documentation.
 */
var usage = ''
        + '\n'
        + '  Usage: pomelo [action] [option]\n'
        + '\n'
        + '  Options:\n'
        + '    init  [path]              init the application\n'
        + '    start [option]            start the application\n'
        + '    stop                      stop the application\n'
        + '    kill                      kill the application\n'
        + '    version                   output framework version\n'
        + '    help                      output help information\n'
        + '    [option]                  developement(default)/production' 
    ;

/**
 * Package information.
 */
var pkg = JSON.parse(fs.readFileSync(__dirname + '/../package.json'));

/**
 * Framework version.
 */
var version = pkg.version;

/**
 * Parse command arguments.
 */
(function () {
    var arg = args.shift();
    switch (arg) {
        case 'help':
            legalArgNum(0);
            abort(usage);
            break;
        case 'version':
            legalArgNum(0);
            abort(version);
            break;
        case 'list':
            legalArgNum(0);
            list();
            break;
        case 'init':
            legalArgNum(1);
            init(args[0]);
            break;
        case 'start':
            start();
            break;
        case 'stop':
            legalArgNum(0);
            terminal('stop');
            break;
        case 'kill':
            legalArgNum(0);
            terminal('kill');
            break;
        default:
            abort(COMMAND_ERROR);
            break;
    }
})();

/**
 * Init application at the given directory `path`.
 *
 * @param {String} path
 */
function init(path) {
    emptyDirectory(path, function (empty) {
        if (empty) {
            createApplicationAt(path);
        } else {
            confirm('destination is not empty, continue? ', function (ok) {
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(path);
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

/**
 * Create directory and files at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
    var name = path;
    var cwd = process.cwd();
    if (path.indexOf('/') !== -1) {
        var str = path.split('/');
        name = str[str.length - 1];
    }
    if (path === '.') {
        var arr = cwd.split('/');
        name = arr[arr.length - 1];
    }
    if (path === '..') {
        var arr = cwd.split('/');
        name = arr[arr.length - 2];
    }

    copy(__dirname + '/../template/', path);
    mkdir(path + '/logs', 0);
    mkdir(path + '/shared', 0);
    setTimeout(function () {
        var repalcefile = [path + '/game-server/app.js', path + '/game-server/package.json', path + '/web-server/package.json'];
        for (var i = 0; i < repalcefile.length; i++) {
            var str = fs.readFileSync(repalcefile[i]).toString();
            fs.writeFileSync(repalcefile[i], str.replace('$', name));
        }
    }, TIME_INIT);
}

/**
 * Start application.
 *
 */
function start() {
    var mode = DEV;
    switch(args.length) {
      case 0:
         break;
      case 1:
         if(args[0] == DEV || args[0] == PRD)
              mode = args[0];
         else if(args[0] == DEM)
              DEAMON = true;
         else
             abort(COMMAND_ERROR);
         break;
      case 2:
         if(args[0] == DEV || args[0] == PRD){
                mode = args[0];
                if(args[1] == DEM)
                     DEAMON = true;
                else 
                     abort(COMMAND_ERROR);
         } 
         else
                abort(COMMAND_ERROR);
         break;
      default:
           abort(COMMAND_ERROR);
           break;
  };
    if (IF_WORKSPACE) {
        var ls;
        if(!DEAMON){
            if(!IF_HOME){
                var cmd = util.format('cd %s && node app.js env=','game-server');
                    cmd += mode;
                     ls = exec(cmd);
            }
            else
                ls = spawn('node', ['app.js', 'env='+mode]);
            ls.stdout.on('data', function (data) {
                    console.log(data.toString());
               });
            ls.stderr.on('data', function (data) {
                    console.log(data.toString());
               });
        }
        else{
             if(FOREVER){
                if(!IF_HOME){
                    var cmd = util.format('cd %s && forever start app.js env=','game-server');
                    cmd += mode;
                    ls = exec(cmd);
                 }
                else
                   ls = spawn('forever', ['start', 'app.js', 'env='+mode]);
                console.info(RUNDEAMON_INFO);
             }
             else 
                 abort(INSTALLFOREVER_ERROR);
        }
        //reserve the child process pid and start mode
        fs.writeFile(TMP_FILE, mode+':'+ls.pid+':'+DEAMON);
    }
    else {
        abort(NOWORKSPACE_ERROR);
    }
}

/**
 * List pomelo processes.
 *
 */
function list() {
     if (fs.existsSync(TMP_FILE)) {
        fs.readFile(TMP_FILE, function (err, data) {
            if (err) throw err;
            var _client = new adminClient();
            MASTER_JSON = IF_HOME ? require(process.cwd()+"/config/master.json"):require(process.cwd()+"/game-server/config/master.json");
            var config = MASTER_JSON[data.toString().split(':')[0]];
            _client.connect('fantasyni',config.host,config.port,function(err){
                if(err) {
                    console.error(CONNECT_ERROR);
                } else {
                    _client.request('nodeInfo', null, function(err, msg) {
                        if(err) {
                          console.error(NODEINFO_ERROR);
                          return;
                        }
                        console.log(util.inspect(msg,true,null));
                        process.exit(1);
                    });
                }
            });
        });
    }
    else {
        abort(NORUNNING_ERROR);
    }
}

/**
 * Terminal application.
 *
 * @param {String} signal stop/kill
 *
 */
function terminal(signal) {
    if (fs.existsSync(TMP_FILE)) {
        fs.readFile(TMP_FILE, function (err, data) {
            if (err) throw err;
            var _client = new adminClient();
            MASTER_JSON = IF_HOME ? require(process.cwd()+"/config/master.json"):require(process.cwd()+"/game-server/config/master.json");
            var config = MASTER_JSON[data.toString().split(':')[0]];
            console.info(CLOSEAPP_INFO);
            _client.connect('fantasyni', config.host, config.port, function (err) {
               if (err){
                  console.error(CONNECT_ERROR);
               }
                _client.request('nodeInfo', null, function (err, msg) {
                    var _pid = [];
                    var _serverId = [];
                    for (var id in msg) {
                        _pid.push(msg[id]['pid']);
                        _serverId.push(msg[id]['serverId']);
                    }
                    _client.request('serverStop', {signal:signal, pid:_pid, serverId:_serverId}, function (err, msg) {
                        if (err){
                            console.error(STOPSERVER_ERROR);
                        }
                        if (signal === 'kill') {
                            if (data.toString().split(':')[2] == 'true') {
                                if (IF_HOME)
                                    exec('forever stop app.js');
                                else
                                    exec('cd game-server && forever stop app.js');
                            }
                            setTimeout(function () {
                                exec('kill -9 ' + data.toString().split(':')[1]);
                                // console.log(util.inspect(msg,true,null));
                                fs.unlinkSync(TMP_FILE);
                                process.exit(1);
                            }, TIME_KILL_WAIT);
                        }
                        else {
                            setTimeout(function () {
                                fs.unlinkSync(TMP_FILE);
                                // console.log(util.inspect(msg,true,null));
                                process.exit(1);
                            }, TIME_STOP_WAIT);
                        }
                    });
                });
            });
        });
    }
    else
        abort(NORUNNING_ERROR);
}
/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
    prompt(msg, function (val) {
        fn(/^ *y(es)?/i.test(val));
    });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
    // prompt
    if (' ' == msg[msg.length - 1]) {
        process.stdout.write(msg);
    } else {
        console.log(msg);
    }
    // stdin
    process.stdin.setEncoding('ascii');
    process.stdin.once('data',function (data) {
        fn(data);
    }).resume();
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
    console.error(str);
    process.exit(1);
}

/**
 * Judge whether the number of arguments is legal.
 *
 * @param {Number} argNum
 */

function legalArgNum(argNum) {
    if (args.length != argNum) {
        console.error(COMMAND_ERROR);
        process.exit(1);
    }
}

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
    if (!fs.existsSync(origin)) {
        console.log(origin + 'is not exist......');
    }
    if (!fs.existsSync(target)) {
        mkdir(target, 0);
        console.log('   \x1b[36mmakedir\x1b[0m : ' + target);
    }
    fs.readdir(origin, function (err, datalist) {
        if (err) return;
        for (var i = 0; i < datalist.length; i++) {
            var oCurrent = origin + '/' + datalist[i];
            var tCurrent = target + '/' + datalist[i];
            if (fs.statSync(oCurrent).isFile()) {
                fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
                console.log('   \x1b[36mcreatefile\x1b[0m : ' + oCurrent);
            }
            else if (fs.statSync(oCurrent).isDirectory()) {
                copy(oCurrent, tCurrent);
            }
        }
    });
}

/**
 * Make directory for new project.
 *
 * @param {String} path
 * @param {Number} mode
 * @param {Function} cb
 */
function mkdir(url, mode, cb) {

    var arr = url.split("/");
    mode = mode || 0755;
    cb = cb || function () {
    };
    if (arr[0] == ".") {
        arr.shift();
    }
    if (arr[0] == "..") {
        arr.splice(0, 2, arr[0] + "/" + arr[1]);
    }
    if(arr[0] == ""){
          arr[0] = "/";
    }

    function inner(cur) {
        if (!fs.existsSync(cur)) {
            fs.mkdirSync(cur, mode);
        }
        if (arr.length) {
            inner(cur + "/" + arr.shift());
        }
        else {
            cb();
        }
    }

    arr.length && inner(arr.shift());
    console.log('   \x1b[36mmakedir\x1b[0m : ' + url);
}
